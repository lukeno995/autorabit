//Generated by wsdl2apex

public class OF_StatusUpdateNew {
    public class StatusUpdateEndpoint {
        List<OF_Puntamento_Callout__c> listCustomSett =  OF_Puntamento_Callout__c.getAll().values();
    	String puntamento=listCustomSett[0].Tibco_Collaudo__c;
        public String endpoint_x = 'https://'+puntamento+'/OF_StatusUpdate_attivi';
        //public String endpoint_x = 'http://localhost:6980/OF_StatusUpdate_attivi';
        public Map<String,String> inputHttpHeaders_x;
        public Map<String,String> outputHttpHeaders_x;
        public String clientCertName_x;
        public String clientCert_x;
        public String clientCertPasswd_x;
        public Integer timeout_x;
        private String[] ns_map_type_info = new String[]{'http://www.openfiber.it/wsdl/concr/StatusUpdate', 'OF_StatusUpdateNew', 'http://www.openfiber.it/schema/OF_StatusUpdate_attivi', 'OF_Schema_StatusUpdateNew'};
       // public OF_Schema_StatusUpdateNew.StatusUpdateResponseType StatusUpdate(String CODICE_OPERATORE,String CODICE_ORDINE_OLO,String CODICE_ORDINE_OF,DateTime DATA_NOTIFICA,String ID_NOTIFICA,String STATO_ORDINE,String CODICE_MOTIVAZIONE,String MOTIVAZIONE,String GPON_DI_ATTESTAZIONE,String ID_SERVIZIO,String NOME_CLIENTE,String COGNOME_CLIENTE,String RECAPITO_TELEFONICO_CLIENTE,Date DATA_PREVISTA_ATTIVAZIONE,DateTime ORARIO_APPUNTAMENTO,String PIN_INTERVENTO_A_VUOTO,String NOTE,OF_Schema_StatusUpdateNew.ApparatoType[] APPARATO,OF_Schema_StatusUpdateNew.VlanType[] VLAN) {
        public OF_Schema_StatusUpdateNew.StatusUpdateResponseType StatusUpdate(EOF_EAI_Service_Log__c sl){
            /*AA RIMOSSO mock per ACK*/
            //try{
                OF_Schema_StatusUpdateNew.StatusUpdateNotifyType request_x = new OF_Schema_StatusUpdateNew.StatusUpdateNotifyType();
                request_x.CODICE_OPERATORE = sl.EOF_CODICE_OPERATORE__c;
                request_x.CODICE_ORDINE_OLO = sl.EOF_CODICE_ORDINE_OLO__c;
                request_x.CODICE_ORDINE_OF = sl.EOF_CODICE_ORDINE_EOF__c;
                request_x.DATA_NOTIFICA = OF_SA_GE_UtilsNew.DateToString(sl.EOF_DATA_NOTIFICA__c);
                request_x.ID_NOTIFICA = sl.EOF_ID_NOTIFICA__c;
                request_x.STATO_ORDINE = sl.EOF_STATO_ORDINE__c;
                request_x.CODICE_MOTIVAZIONE = sl.EOF_CODICE_MOTIVAZIONE__c;
                request_x.MOTIVAZIONE = sl.EOF_MOTIVAZIONE__c;
                request_x.GPON_DI_ATTESTAZIONE = sl.EOF_GPON_Attestazione__c;
                if(sl.OF_Remote_ID__c != null && String.isNotBlank(sl.OF_Remote_ID__c)){
                    request_x.ID_SERVIZIO = sl.OF_Remote_ID__c;
                }else{
                    request_x.ID_SERVIZIO = sl.EOF_ID_SERVIZIO__c;
                }
                request_x.NOME_CLIENTE = sl.EOF_NOME_CLIENTE__c;
                request_x.COGNOME_CLIENTE = sl.EOF_COGNOME_CLIENTE__c;
                request_x.RECAPITO_TELEFONICO_CLIENTE = sl.EOF_RECAPITO_TELEFONICO_CLIENTE__c; 
                if(sl.EOF_DATA_PREVISTA_ATTIVAZIONE__c!=null){
                    request_x.DATA_PREVISTA_ATTIVAZIONE = OF_SA_GE_UTilsNew.dateToStringNoTime(sl.EOF_DATA_PREVISTA_ATTIVAZIONE__c);
                }
                //request_x.DATA_PREVISTA_ATTIVAZIONE = DATA_PREVISTA_ATTIVAZIONE;
                //request_x.ORARIO_APPUNTAMENTO = ORARIO_APPUNTAMENTO;
                if(!String.isBlank(sl.EOF_ORARIO_APPUNTAMENTO__c)){
                    request_x.ORARIO_APPUNTAMENTO=sl.EOF_ORARIO_APPUNTAMENTO__c;
                }
                request_x.PIN_INTERVENTO_A_VUOTO = sl.EOF_PIN_INTERVENTO_A_VUOTO__c;
                request_x.NOTE = sl.EOF_NOTE__c;
                request_x.FLAG_DESOSPENSIONE = sl.OF_Flag_Desospensione__c;
                //check per i log non ancora inseriti(acquisizione OK/KO e cessazione KO)
                if(String.isNotBlank(sl.Id)){
                    List<EOF_EAI_Service_Log__C> sList= [select Id,recordtype.name,OF_SA_NOME_SERVIZIO__c,OF_SA_INFORMAZIONI_SERVIZIO__c,EOF_TIPOLOGIA_APPARATO__C,
                            OF_SA_PASSWORD_APPARATO__C,OF_SA_AZIONE_APPARATO__C,OF_SA_KIT_CONSEGNA_VLAN__C, OF_SA_USER_VLAN__C,OF_SA_SERVICE_VLAN__C,
                            OF_SA_PROFILO_VLAN__C,OF_SA_INFORMAZIONI_VLAN__C,OF_SA_CUSTOMER_VLAN__C,OF_SA_MODELLO_DI_SERVIZIO_VLAN__C,OF_SA_ESITO_RITIRO_APPARATO__C,
                            OF_SA_CODICE_MOTIVAZIONE_RITIRO__C, OF_SA_MOTIVAZIONE_RITIRO__C,EOF_Tipo_COmunicazione_String__c,recordtype.developername 
                            from EOF_EAI_Service_Log__C
                            where OF_SA_VLan_Log__c=:sl.Id OR OF_SA_Servizi_Aggiuntivi_Log__c=:sl.Id OR OF_SA_Cpe_Log__c=:sl.Id]; 
                    
                    if(!sList.isEmpty()){
                        request_x.APPARATO = new List<OF_Schema_StatusUpdateNew.ApparatoType>();
                        request_x.VLAN = new List<OF_Schema_StatusUpdateNew.VlanType>();
                        for(EOF_EAI_Service_Log__C sLog : sList){
                            if(sLog.recordtype.developername=='OF_SA_Cpe'){
                                OF_Schema_StatusUpdateNew.ApparatoType app = new OF_Schema_StatusUpdateNew.ApparatoType();
                                    app.TIPOLOGIA_APPARATO=sLog.EOF_TIPOLOGIA_APPARATO__C;
                                    app.ESITO_RITIRO_APPARATO=sLog.OF_SA_ESITO_RITIRO_APPARATO__C; 
                                    app.CODICE_MOTIVAZIONE_RITIRO=sLog.OF_SA_CODICE_MOTIVAZIONE_RITIRO__C;
                                    app.MOTIVAZIONE_RITIRO=sLog.OF_SA_MOTIVAZIONE_RITIRO__C;
                                request_x.APPARATO.add(app);  
                            } 
                            
                            if(sLog.recordtype.developername=='OF_SA_Vlan'){
                                OF_Schema_StatusUpdateNew.VlanType v = new OF_Schema_StatusUpdateNew.VlanType();
                                    v.USER_VLAN=sLog.OF_SA_USER_VLAN__C;
                                    v.SERVICE_VLAN=sLog.OF_SA_SERVICE_VLAN__C;
                                    v.CUSTOMER_VLAN=sLog.OF_SA_CUSTOMER_VLAN__C;
                                request_x.VLAN.add(v); 
                            }
                            
                        } 
                    }
                }
                
                OF_Schema_StatusUpdateNew.StatusUpdateResponseType response_x;
                Map<String, OF_Schema_StatusUpdateNew.StatusUpdateResponseType> response_map_x = new Map<String, OF_Schema_StatusUpdateNew.StatusUpdateResponseType>();
                response_map_x.put('response_x', response_x);
                WebServiceCallout.invoke(
                this,
                request_x,
                response_map_x,
                new String[]{endpoint_x,
                '/OF_StatusUpdate_attivi/StatusUpdateEndpoint/StatusUpdateNotify',
                'http://www.openfiber.it/schema/OF_StatusUpdate_attivi',
                'statusUpdateNotify',
                'http://www.openfiber.it/schema/OF_StatusUpdate_attivi',
                'statusUpdateResponse',
                'OF_Schema_StatusUpdateNew.StatusUpdateResponseType'}
                );
                response_x = response_map_x.get('response_x');
                return response_x;
            /*}catch(Exception e){
                OF_Schema_StatusUpdateNew.StatusUpdateResponseType response_x = new OF_Schema_StatusUpdateNew.StatusUpdateResponseType();
                    response_x.ESITO = '0';
                    response_x.MOTIVAZIONE = 'ACK FINTO!!';
                return response_x;
            }*/
        }
    }
}