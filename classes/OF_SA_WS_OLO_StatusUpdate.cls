//Generated by wsdl2apex

public class OF_SA_WS_OLO_StatusUpdate {
    public class NotifyPortTypeEndpoint {
    	List<OF_Puntamento_Callout__c> listCustomSett =  OF_Puntamento_Callout__c.getAll().values();
    	String puntamento=listCustomSett[0].OF_OGW__c;
        public String endpoint_x = 'https://'+puntamento+'.ENEL.COM:44300/NotifyServiziAttivi/OF_StatusUpdate';
        //public String endpoint_x = 'https://requestb.in/19iacvs1';
        public Map<String,String> inputHttpHeaders_x;
        public Map<String,String> outputHttpHeaders_x;
        public String clientCertName_x;
        public String clientCert_x;
        public String clientCertPasswd_x;      
        public Integer timeout_x;
        private String[] ns_map_type_info = new String[]{'http://enel.it/schemas/class/ServiziAttivi/Esito', 'OF_SA_WS_OLO_Response', 'http://enel.it/schemas/class/ServiziAttivi/NotificaAggiornamentoStato', 'OF_SA_WS_OLO_Classi', 'http://xmlns.enel.it/OLO_Gatway/wsdl/concrete/ServiziAttivi/NotifyAggiornaStato', 'OF_SA_WS_OLO_StatusUpdate'};
        //metodo per l'invio dell'acquisizione
        public OF_SA_WS_OLO_Response.Esito_element NotifyAggiornaStato(EOF_EAI_Service_Log__c sl) {
            OF_SA_WS_OLO_Classi.NotificaAggiornamentoStato_element request_x = new OF_SA_WS_OLO_Classi.NotificaAggiornamentoStato_element();
            request_x.CODICE_OPERATORE = sl.EOF_CODICE_OPERATORE__c;
            request_x.CODICE_ORDINE_OLO = sl.EOF_CODICE_ORDINE_OLO__c;
            request_x.CODICE_ORDINE_OF = sl.EOF_CODICE_ORDINE_EOF__c;
            request_x.DATA_NOTIFICA = OF_SA_GE_Utils.DateToString(sl.EOF_DATA_NOTIFICA__c);
            request_x.ID_NOTIFICA = sl.EOF_ID_NOTIFICA__c;
            request_x.STATO_ORDINE = sl.EOF_STATO_ORDINE__c;  
            request_x.CODICE_MOTIVAZIONE = sl.EOF_CODICE_MOTIVAZIONE__c;
            request_x.MOTIVAZIONE = sl.EOF_MOTIVAZIONE__c;
            request_x.GPON_DI_ATTESTAZIONE = sl.EOF_GPON_Attestazione__c;
            request_x.NOME_CLIENTE = sl.EOF_NOME_CLIENTE__c;
            request_x.COGNOME_CLIENTE = sl.EOF_COGNOME_CLIENTE__c;
            request_x.RECAPITO_TELEFONICO_CLIENTE = sl.EOF_RECAPITO_TELEFONICO_CLIENTE__c;
            if(sl.EOF_DATA_PREVISTA_ATTIVAZIONE__c!=null){
            	request_x.DATA_PREVISTA_ATTIVAZIONE = OF_SA_GE_Utils.DateToStringNoTime(sl.EOF_DATA_PREVISTA_ATTIVAZIONE__c);
            }
            if(!String.isBlank(sl.EOF_ORARIO_APPUNTAMENTO__c)){
            	request_x.ORARIO_APPUNTAMENTO=sl.EOF_ORARIO_APPUNTAMENTO__c;
            }
            request_x.PIN_INTERVENTO_A_VUOTO = sl.EOF_PIN_INTERVENTO_A_VUOTO__c; 
            request_x.NOTE = sl.EOF_NOTE__c; 
            
            //check per i log non ancora inseriti(acquisizione OK/KO e cessazione KO)
            if(String.isNotBlank(sl.Id)){
	            List<EOF_EAI_Service_Log__C> sList= [select Id,recordtype.name,OF_SA_NOME_SERVIZIO__c,OF_SA_INFORMAZIONI_SERVIZIO__c,EOF_TIPOLOGIA_APPARATO__C,
				        OF_SA_PASSWORD_APPARATO__C,OF_SA_AZIONE_APPARATO__C,OF_SA_KIT_CONSEGNA_VLAN__C, OF_SA_USER_VLAN__C,OF_SA_SERVICE_VLAN__C,
				        OF_SA_PROFILO_VLAN__C,OF_SA_INFORMAZIONI_VLAN__C,OF_SA_CUSTOMER_VLAN__C,OF_SA_MODELLO_DI_SERVIZIO_VLAN__C,OF_SA_ESITO_RITIRO_APPARATO__C,
				        OF_SA_CODICE_MOTIVAZIONE_RITIRO__C, OF_SA_MOTIVAZIONE_RITIRO__C,EOF_Tipo_COmunicazione_String__c,recordtype.developername 
				        from EOF_EAI_Service_Log__C
				        where OF_SA_VLan_Log__c=:sl.Id OR OF_SA_Servizi_Aggiuntivi_Log__c=:sl.Id OR OF_SA_Cpe_Log__c=:sl.Id]; 
	            
	            if(!sList.isEmpty()){
		        	request_x.APPARATO = new List<OF_SA_WS_OLO_Classi.RITIRO_APPARATO_element>();
		        	request_x.VLAN = new List<OF_SA_WS_OLO_Classi.VLAN_element>();
		        	for(EOF_EAI_Service_Log__C sLog : sList){
		        		if(sLog.recordtype.developername=='OF_SA_Cpe'){
		        			OF_SA_WS_OLO_Classi.RITIRO_APPARATO_element app = new OF_SA_WS_OLO_Classi.RITIRO_APPARATO_element();
			        		app.TIPOLOGIA_APPARATO=sLog.EOF_TIPOLOGIA_APPARATO__C;
				        	app.ESITO_RITIRO_APPARATO=sLog.OF_SA_ESITO_RITIRO_APPARATO__C; 
				        	app.CODICE_MOTIVAZIONE_RITIRO=sLog.OF_SA_CODICE_MOTIVAZIONE_RITIRO__C;
				        	app.MOTIVAZIONE_RITIRO=sLog.OF_SA_MOTIVAZIONE_RITIRO__C;
			        		request_x.APPARATO.add(app);  
		        		} 
		        		
		        		if(sLog.recordtype.developername=='OF_SA_Vlan'){
		        			OF_SA_WS_OLO_Classi.VLAN_element v = new OF_SA_WS_OLO_Classi.VLAN_element();
				        	v.USER_VLAN=sLog.OF_SA_USER_VLAN__C;
				        	v.SERVICE_VLAN=sLog.OF_SA_SERVICE_VLAN__C;
				        	v.CUSTOMER_VLAN=sLog.OF_SA_CUSTOMER_VLAN__C;
			        		request_x.VLAN.add(v); 
		        		}
		        		
			        } 
	            }
            }
            //system.debug('Alessadro: lista app: '+request_x.APPARATO.size()+', lista vlan: '+request_x.VLAN.size());
            //request_x.APPARATO = APPARATO;
            OF_SA_WS_OLO_Response.Esito_element response_x;
            Map<String, OF_SA_WS_OLO_Response.Esito_element> response_map_x = new Map<String, OF_SA_WS_OLO_Response.Esito_element>();
            response_map_x.put('response_x', response_x);
            WebServiceCallout.invoke(
              this, 
              request_x,
              response_map_x,
              new String[]{endpoint_x,
              '/NotifyAggiornaStato',
              'http://enel.it/schemas/class/ServiziAttivi/NotificaAggiornamentoStato',
              'NotificaAggiornamentoStato',
              'http://enel.it/schemas/class/ServiziAttivi/Esito',
              'Esito',
              'OF_SA_WS_OLO_Response.Esito_element'}
            );
            response_x = response_map_x.get('response_x');
            system.debug('OSCRM Test response_x:'+response_x);
            
            if(OF_SA_GE_Utils.slSFOLO!=null){
                OF_SA_GE_Utils.slSFOLO.EOF_Richiesta_Notifica__c = OF_SA_GE_UTils.copy_request(request_x);
            }
            else if(OF_CO_GE_Utils.slSFOLO!=null){
                OF_CO_GE_Utils.slSFOLO.EOF_Richiesta_Notifica__c = OF_CO_GE_Utils.copy_request(request_x);
            }

            //update sl;
            if(OF_SA_GE_Utils.testNackTecnicoOLO){ 
            	 OF_SA_WS_OLO_Response.Esito_element resp = (OF_SA_WS_OLO_Response.Esito_element) OF_SA_GE_Utils.simulateNACK('OM');
            	return resp;
            }
            return response_x;
        }
        //metodo per gli altri status update
        public OF_SA_WS_OLO_Response.Esito_element NotifyAggiornaStato(List<EOF_EAI_Service_Log__c> sList) {
            OF_SA_WS_OLO_Classi.NotificaAggiornamentoStato_element request_x = new OF_SA_WS_OLO_Classi.NotificaAggiornamentoStato_element();
            EOF_EAI_Service_Log__c slToUpdate = new EOF_EAI_Service_Log__c();
            for(EOF_EAI_Service_Log__c sl :sList){  
            	if(sl.EOF_Tipo_Comunicazione_String__C=='SF->OLO - StatusUpdate'){
            		slToUpdate = sl;
		            request_x.CODICE_OPERATORE = sl.EOF_CODICE_OPERATORE__c;
		            request_x.CODICE_ORDINE_OLO = sl.EOF_CODICE_ORDINE_OLO__c;
		            request_x.CODICE_ORDINE_OF = sl.EOF_CODICE_ORDINE_EOF__c;
		            request_x.DATA_NOTIFICA = OF_SA_GE_Utils.DateToString(sl.EOF_DATA_NOTIFICA__c);
		            request_x.ID_NOTIFICA = sl.EOF_ID_NOTIFICA__c;
		            request_x.STATO_ORDINE = sl.EOF_STATO_ORDINE__c;  
		            request_x.CODICE_MOTIVAZIONE = sl.EOF_CODICE_MOTIVAZIONE__c;
		            request_x.MOTIVAZIONE = sl.EOF_MOTIVAZIONE__c;
		            request_x.GPON_DI_ATTESTAZIONE = sl.EOF_GPON_Attestazione__c;
		            request_x.NOME_CLIENTE = sl.EOF_NOME_CLIENTE__c;
		            request_x.COGNOME_CLIENTE = sl.EOF_COGNOME_CLIENTE__c;
		            request_x.RECAPITO_TELEFONICO_CLIENTE = sl.EOF_RECAPITO_TELEFONICO_CLIENTE__c;
		            if(sl.EOF_DATA_PREVISTA_ATTIVAZIONE__c!=null){
		            	request_x.DATA_PREVISTA_ATTIVAZIONE = OF_SA_GE_Utils.DateToStringNoTime(sl.EOF_DATA_PREVISTA_ATTIVAZIONE__c);
		            }if(!String.isBlank(sl.EOF_ORARIO_APPUNTAMENTO__c)){
		            	request_x.ORARIO_APPUNTAMENTO=sl.EOF_ORARIO_APPUNTAMENTO__c;
		            }
		            request_x.PIN_INTERVENTO_A_VUOTO = sl.EOF_PIN_INTERVENTO_A_VUOTO__c; 
		            request_x.NOTE = sl.EOF_NOTE__c;
            	} 
            }
            
            system.debug('sList------------->'+sList);            
            if(sList.size()>1){ 
	        	request_x.APPARATO = new List<OF_SA_WS_OLO_Classi.RITIRO_APPARATO_element>();
	        	request_x.VLAN = new List<OF_SA_WS_OLO_Classi.VLAN_element>();
	        	for(EOF_EAI_Service_Log__C sLog : sList){
	        		if(sLog.EOF_Tipo_Comunicazione_String__c=='CPE'){
	        			OF_SA_WS_OLO_Classi.RITIRO_APPARATO_element app = new OF_SA_WS_OLO_Classi.RITIRO_APPARATO_element();
		        		app.TIPOLOGIA_APPARATO=sLog.EOF_TIPOLOGIA_APPARATO__C;
			        	app.ESITO_RITIRO_APPARATO=sLog.OF_SA_ESITO_RITIRO_APPARATO__C; 
			        	app.CODICE_MOTIVAZIONE_RITIRO=sLog.OF_SA_CODICE_MOTIVAZIONE_RITIRO__C;
			        	app.MOTIVAZIONE_RITIRO=sLog.OF_SA_MOTIVAZIONE_RITIRO__C;
		        		request_x.APPARATO.add(app);  
	        		} 
	        		if(sLog.EOF_Tipo_COmunicazione_String__c=='VLAN'){
	        			OF_SA_WS_OLO_Classi.VLAN_element v = new OF_SA_WS_OLO_Classi.VLAN_element();
			        	v.USER_VLAN=sLog.OF_SA_USER_VLAN__C;
			        	v.SERVICE_VLAN=sLog.OF_SA_SERVICE_VLAN__C;
			        	v.CUSTOMER_VLAN=sLog.OF_SA_CUSTOMER_VLAN__C;
		        		request_x.VLAN.add(v); 
	        		}
		        } 
            }
            //request_x.APPARATO = APPARATO;
            OF_SA_WS_OLO_Response.Esito_element response_x;
            Map<String, OF_SA_WS_OLO_Response.Esito_element> response_map_x = new Map<String, OF_SA_WS_OLO_Response.Esito_element>();
            response_map_x.put('response_x', response_x);
            WebServiceCallout.invoke(
              this, 
              request_x,
              response_map_x,
              new String[]{endpoint_x,
              '/NotifyAggiornaStato',
              'http://enel.it/schemas/class/ServiziAttivi/NotificaAggiornamentoStato',
              'NotificaAggiornamentoStato',
              'http://enel.it/schemas/class/ServiziAttivi/Esito',
              'Esito',
              'OF_SA_WS_OLO_Response.Esito_element'}
            );
            response_x = response_map_x.get('response_x');
            //creo l'xml per il service log
            if(OF_SA_GE_Utils.slSFOLO!=null){
                OF_SA_GE_Utils.slSFOLO.EOF_Richiesta_Notifica__c = OF_SA_GE_UTils.copy_request(request_x);
            }
            else if(OF_CO_GE_Utils.slSFOLO!=null){
                OF_CO_GE_Utils.slSFOLO.EOF_Richiesta_Notifica__c = OF_CO_GE_Utils.copy_request(request_x);
            }
            if(OF_CO_GE_Utils.ListSlStatusUpdateSFOLO!=null && !OF_CO_GE_Utils.ListSlStatusUpdateSFOLO.isEmpty()){
            	slToUpdate.EOF_Richiesta_Notifica__c = OF_CO_GE_UTils.copy_request(request_x);
            }
            else{
            	slToUpdate.EOF_Richiesta_Notifica__c = OF_SA_GE_UTils.copy_request(request_x);
            }
    		
            //update slToUpdate;
            system.debug('La request è: '+request_x);
            return response_x;
        }
    }
}